// Code generated by github.com/leiax00/protoc-gen-gin. DO NOT EDIT.

package v1

import (
	context "context"
	errors "errors"
	gin "github.com/gin-gonic/gin"
	metadata "google.golang.org/grpc/metadata"
)

// This is a compile-time assertion to ensure that this generated file is compatible
// with the leiax00/protoc-gen-gin package it is being compiled against.
// context.metadata.
//gin.errors.

type ConfigHttpServer interface {
	GetProp(context.Context, *PropCond) (*Prop, error)
}

func RegisterConfigHttpServer(r gin.IRouter, srv ConfigHttpServer) {
	r.Handle("GET", "/prop/:key", _ConfigGetProp0(srv))
}

// Resp 返回值
type defaultConfigResp struct{}

func (resp defaultConfigResp) response(ctx *gin.Context, status, code int, msg string, data interface{}) {
	ctx.JSON(status, map[string]interface{}{
		"code": code,
		"msg":  msg,
		"data": data,
	})
}

// Error 返回错误信息
func (resp defaultConfigResp) Error(ctx *gin.Context, err error) {
	code := -1
	status := 500
	msg := "未知错误"

	if err == nil {
		msg += ", err is nil"
		resp.response(ctx, status, code, msg, nil)
		return
	}

	type iCode interface {
		HTTPCode() int
		Message() string
		Code() int
	}

	var c iCode
	if errors.As(err, &c) {
		status = c.HTTPCode()
		code = c.Code()
		msg = c.Message()
	}

	_ = ctx.Error(err)

	resp.response(ctx, status, code, msg, nil)
}

// ParamsError 参数错误
func (resp defaultConfigResp) ParamsError(ctx *gin.Context, err error) {
	_ = ctx.Error(err)
	resp.response(ctx, 400, 400, "参数错误", nil)
}

// Success 返回成功信息
func (resp defaultConfigResp) Success(ctx *gin.Context, data interface{}) {
	resp.response(ctx, 200, 0, "成功", data)
}

func _ConfigGetProp0(srv ConfigHttpServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in PropCond
		var resp = defaultConfigResp{}

		if err := ctx.ShouldBindUri(&in); err != nil {
			resp.ParamsError(ctx, err)
			return
		}

		if err := ctx.ShouldBindQuery(&in); err != nil {
			resp.ParamsError(ctx, err)
			return
		}

		md := metadata.New(nil)
		for k, v := range ctx.Request.Header {
			md.Set(k, v...)
		}
		newCtx := metadata.NewIncomingContext(ctx, md)
		out, err := srv.GetProp(newCtx, &in)
		if err != nil {
			resp.Error(ctx, err)
			return
		}

		resp.Success(ctx, out)
	}
}
